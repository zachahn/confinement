#!/usr/bin/env ruby
# frozen_string_literal: true

if File.exist?(File.expand_path("../.git", __dir__))
  lib = File.expand_path("../lib", __dir__)
  $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
end

require "optparse"
require "pathname"

require "confinement"
require "confinement/version"

module Confinement
  class CLI
    def self.subcommands
      @subcommands ||= {
        "init" => Init.new,
        "server" => Server.new,
      }
    end

    def self.script_name
      @script_name ||= File.basename(__FILE__)
    end

    def optparser
      @optparser ||= OptionParser.new do |opts|
        opts.banner = "Usage: #{CLI.script_name} [options] [subcommand [options]]"

        opts.on("--version", "Print version (#{Confinement::VERSION})") do
          puts Confinement::VERSION
          exit
        end

        opts.on("-h", "--help", "Prints this help message") do
        end

        opts.separator("")
        opts.separator("Subcommands")
        self.class.subcommands.each do |name, _|
          opts.separator("    #{name}")
        end
      end
    end

    def call(argv)
      optparser.order!(argv)
      subcommand_name = argv.shift

      if subcommand_name.nil?
        puts(optparser)
        exit
      end

      if !self.class.subcommands.key?(subcommand_name)
        $stderr.puts("#{CLI.script_name}: `#{subcommand_name}` is not valid command")
        $stderr.puts
        $stderr.puts(optparser)
        exit(1)
      end

      subcommand = self.class.subcommands.fetch(subcommand_name)
      subcommand.optparser.parse!(argv)
      subcommand.call(argv)
    end

    private

    class Server
      using Easier

      def optparser
        @options ||= {
          "--setup" => "config/setup.rb",
          "--rules" => "build.rb",
        }
        @optparser ||= OptionParser.new do |opts|
          opts.banner = "Usage: #{CLI.script_name} server [options]"
          opts.on("--setup=PATH", "Path to setup file (default: #{@options["--setup"]})") do |path|
            @options["--setup"] = path
          end
          opts.on("--rules=PATH", "Path to rules file (default: #{@options["--rules"]})") do |path|
            @options["--rules"] = path
          end
        end
      end

      def call(argv)
        if argv.size > 1
          puts optparser
          exit
        end

        setup_path = @options.fetch("--setup")
        setup_path = Pathname.new(setup_path).expand_path

        if !setup_path.exist?
          raise "Cannot find setup file at: #{setup_path}"
        end

        require "confinement/filewatcher/filewatcher"
        load setup_path

        require "rack"
        require "puma"
        require "puma/configuration"

        dirty = Dirty.new

        puma_config = Puma::Configuration.new do |user_config, file_config, default_config|
          user_config.app(Rack::CommonLogger.new(App.new(Confinement.config, "build.rb", dirty)))
        end

        assets_filewatcher = Filewatcher.new(Confinement.watcher_paths.assets)
        contents_filewatcher = Filewatcher.new(Confinement.watcher_paths.contents)
        puma_launcher = Puma::Launcher.new(puma_config, events: Puma::Events.stdio)

        assets_thread = Thread.new do
          assets_filewatcher.watch { dirty.dirty_assets! }
        end

        contents_thread = Thread.new do
          contents_filewatcher.watch { dirty.dirty_contents! }
        end

        puma_launcher.run
      end

      class Dirty
        def initialize
          @dirty_assets = true
          @dirty_contents = true
          @mutex = Mutex.new
        end

        def dirty_assets!
          @mutex.synchronize { @dirty_assets = true }
        end

        def dirty_contents!
          @mutex.synchronize { @dirty_contents = true }
        end

        def clean!
          @mutex.synchronize do
            if @dirty_assets || @dirty_contents
              yield(@dirty_assets, @dirty_contents)
            end

            @dirty_assets = false
            @dirty_contents = false
          end
        end
      end

      class App
        def initialize(config, rules_path, dirty)
          @config = config
          @rules_path = config.root.concat(rules_path).cleanpath
          @dirty = dirty
          @output_root_path = config.compiler.output_root_path
          @output_directory_index = config.compiler.output_directory_index
          @compiler = Compiler.new
          @first = true
        end

        def call(env)
          if !["GET", "HEAD"].include?(env["REQUEST_METHOD"])
            return [405, { "Content-Type" => "text/plain" }, ["Unsupported method: ", env["REQUEST_METHOD"]]]
          end

          @dirty.clean! do |is_dirty_assets, is_dirty_contents|
            puts "Recompiling #{is_dirty_assets ? "everything" : "contents"}..."

            Confinement.loader.reload if !@first
            @first = false

            if is_dirty_assets
              load @rules_path
              @compiler.compile_everything(Confinement.site)
            elsif is_dirty_contents
              partial_compilation = Confinement.site.partial_compilation
              load @rules_path
              Confinement.site.partial_compilation = partial_compilation
              @compiler.compile_contents(Confinement.site)
            end

            puts "Done recompiling!"
          end

          file_path = @output_root_path.concat(env["SCRIPT_NAME"] + env["PATH_INFO"])

          if file_path.directory?
            file_path = file_path.concat(@output_directory_index)
          end

          if !file_path.exist?
            return [404, {}, ["Page not found!\n", file_path.to_s]]
          end

          if env["REQUEST_METHOD"] == "HEAD"
            return [204, {}, []]
          end

          [200, {}, [file_path.read]]
        end
      end
    end

    class Init
      def optparser
        @options ||= {}
        @optparser ||= OptionParser.new do |opts|
          opts.banner = "Usage: #{CLI.script_name} init [directory]"

          opts.on("--force", "Write files without prompting") do
            @force = true
          end

          opts.on("--skip", "Skip files without prompting") do
            @skip = true
          end

          opts.on("-h", "--help", "Prints this help message") do
            puts opts
            exit
          end
        end
      end

      def call(argv)
        if argv.size != 1
          puts optparser
          exit
        end

        require "open3"

        root = Pathname.new(argv.first).expand_path

        templates = data.split(/^==> /)[1..-1]
        templates = templates.filter_map do |template|
          path, *body = template.lines
          body = body.join("")

          [Pathname.new(File.join(root, path.strip)), body.strip + "\n"]
        end

        templates
          .map { |path, _| path.dirname }
          .uniq
          .each { |path| mkdir(path, root) }

        templates.each do |path, body|
          write(path, body, root)
        end

        Dir.chdir(root) do
          run(["yarn", "add", "--dev", "parcel@nightly"])
        end
      end

      private

      def run(command)
        status("exec", command.join(" "))
        Open3.capture2(*command)
      end

      def write(path, body, root)
        relpath = path.relative_path_from(root.dirname)

        if path.exist?
          if @skip
            status("skip", relpath)
          elsif @force
            status("force", relpath)
            path.write(body)
          elsif yes?("overwrite #{path}?")
            status("overwrite", relpath)
            path.write(body)
          else
            status("skip", relpath)
          end
        else
          status("write", relpath)
          path.write(body)
        end
      end

      def mkdir(dir, root)
        if dir.exist?
          status("exist", dir.relative_path_from(root.dirname))
        else
          status("mkdir", dir.relative_path_from(root.dirname))
          dir.mkdir
        end
      end

      def status(action, object)
        space = 12 - action.size
        puts "    #{action}#{" " * space}#{object}"
      end

      def yes?(question)
        print "#{question} (y/N) "
        answer = $stdin.gets

        return false if answer.nil?

        /^y/i.match?(answer)
      end

      def data
        contents = File.read(__FILE__)
        contents.split(/^__END__$/)[1]
      end
    end
  end
end

Confinement::CLI.new.call(ARGV.dup)

__END__
==> config/boot.rb
require "confinement"

==> config/setup.rb
require_relative "boot"

Confinement.config = Confinement::Config.new(root: File.dirname(__dir__))

Confinement.config.compiler do |compiler|
  compiler.output_root = "public"
  compiler.output_assets = "assets"
  compiler.output_directory_index = "index.html"
end

Confinement.config.source do |source|
  source.assets = "assets"
  source.contents = "contents"
  source.layouts = "layouts"
end

Confinement.loader do |loader|
  loader.push_dir("lib")
  loader.enable_reloading
end

Confinement.watcher_paths do |paths|
  paths.assets.push(Confinement.config.root.join("assets/**/*"))
  paths.assets.push(Confinement.config.root.join("package.json"))
  paths.assets.push(Confinement.config.root.join("yarn.lock"))
  paths.contents.push(Confinement.config.root.join("contents"))
  paths.contents.push(Confinement.config.root.join("build.rb"))
end

==> build.rb
require_relative "config/setup"

Confinement.site.build do |assets:, layouts:, contents:, routes:|
  assets.init("application.js", entrypoint: true)
  assets.init("application.css", entrypoint: false)

  layouts.init("default.html.erb")

  routes["/"] = contents.init("index.html.erb") do |content|
    content.layout = layouts["default.html.erb"]
  end
end

==> write.rb
require_relative "build"

Confinement::Publish.new(Confinement.site).write

==> package.json
{
  "name": "website",
  "version": "1.0.0",
  "license": "UNLICENSED",
  "devDependencies": {
  },
  "dependencies": {
  }
}

==> assets/application.js
import "./application.css";

==> assets/application.css
body { color: blue }

==> layouts/default.html.erb
<!DOCTYPE HTML>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="<%= assets["application.css"].url_path %>" charset="utf-8">
  </head>
  <body>
    <%= yield %>
  </body>
</html>

==> contents/index.html.erb
hello!
